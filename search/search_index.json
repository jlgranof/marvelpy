{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Marvelpy","text":"<p>A fully-typed Python client for the Marvel Comics API.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\ude80 Async-first design - Built with modern async/await patterns</li> <li>\ud83d\udd12 Fully typed - Complete type hints for better IDE support</li> <li>\ud83d\udcda Comprehensive - Full coverage of the Marvel Comics API</li> <li>\ud83d\udee1\ufe0f Enterprise-ready - Production-grade error handling and retry logic</li> <li>\ud83d\udcd6 Well documented - Extensive documentation and examples</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import asyncio\nfrom marvelpy import MarvelClient\n\nasync def main():\n    async with MarvelClient(\"your_public_key\", \"your_private_key\") as client:\n        # Get characters\n        characters = await client.get_characters(params={\"limit\": 5})\n        print(f\"Found {characters['data']['count']} characters\")\n\n        # Search for specific characters\n        iron_man = await client.get_characters(params={\"name\": \"iron man\"})\n        print(f\"Iron Man: {iron_man['data']['results'][0]['name']}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install marvelpy\n</code></pre>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li>Check out the Installation Guide for detailed setup instructions</li> <li>Follow the Quick Start Guide to get up and running</li> <li>Browse the API Reference for detailed documentation</li> </ul>"},{"location":"#development-status","title":"Development Status","text":"<p>Current Version: v0.2.1</p> <p>This package now includes a fully functional MarvelClient with character access, authentication, and comprehensive error handling.</p>"},{"location":"#whats-available","title":"What's Available","text":"<ul> <li>MarvelClient - Full-featured async client for Marvel API</li> <li>Authentication - Automatic Marvel API authentication</li> <li>Character Access - Search and retrieve character information</li> <li>Error Handling - Robust retry logic and error management</li> <li>Type Safety - Complete type hints throughout</li> <li>Test Suite - Comprehensive tests with 85% coverage</li> <li>Documentation - Full API documentation with examples</li> </ul>"},{"location":"#coming-soon","title":"Coming Soon","text":"<p>Future versions will include:</p> <ul> <li>Comics - Access comic book data and metadata</li> <li>Events - Marvel universe events and storylines</li> <li>Series - Comic series information</li> <li>Stories - Individual story details</li> <li>Creators - Creator and artist information</li> <li>Advanced Search - More sophisticated filtering options</li> <li>Caching - Built-in response caching</li> <li>Rate Limiting - Automatic rate limit management</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>push# Changelog</p> <p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Comics endpoint support</li> <li>Events and series information</li> <li>Creator and artist data</li> <li>Advanced search functionality</li> <li>Response caching</li> <li>Rate limiting management</li> </ul>"},{"location":"changelog/#021-2025-01-xx","title":"[0.2.1] - 2025-01-XX","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>CI/CD Pipeline - Fixed all pre-commit hook issues and GitHub Actions permissions</li> <li>Documentation Deployment - Resolved GitHub Pages deployment workflow</li> <li>Code Quality - Applied comprehensive formatting and type checking fixes</li> <li>Workflow Cleanup - Removed corrupted Jekyll workflow that was interfering</li> <li>README Corruption - Fixed corrupted README.md title and content</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated all version references from 0.2.0 to 0.2.1 across the repository</li> </ul>"},{"location":"changelog/#020-2025-01-xx","title":"[0.2.0] - 2025-01-XX","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>MarvelClient - Full-featured async client for Marvel API</li> <li>Authentication - Automatic Marvel API authentication with MD5 hashing</li> <li>Character Access - Search and retrieve character information</li> <li>Error Handling - Robust retry logic with exponential backoff</li> <li>HTTP Methods - GET requests with parameter support</li> <li>Context Manager - Async context manager for automatic resource cleanup</li> <li>Health Check - API connectivity testing</li> <li>Type Safety - Complete type hints throughout the client</li> <li>Comprehensive Tests - 85% test coverage with mocked HTTP requests</li> <li>Documentation - Full API documentation with examples</li> <li>Examples - Working examples with real API integration</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Updated from hello world demo to full API client</li> <li>Enhanced error handling and retry mechanisms</li> <li>Improved documentation structure</li> </ul>"},{"location":"changelog/#technical-details","title":"Technical Details","text":"<ul> <li>Async/await patterns throughout</li> <li>httpx for HTTP requests</li> <li>Automatic authentication parameter generation</li> <li>Configurable timeouts and retry limits</li> <li>Connection pooling and resource management</li> </ul>"},{"location":"changelog/#010-2024-01-xx","title":"[0.1.0] - 2024-01-XX","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Initial package structure</li> <li>Hello world demonstration function</li> <li>Comprehensive test suite with 100% coverage</li> <li>GitHub Actions CI/CD workflows</li> <li>MkDocs documentation</li> <li>Type hints and static type checking</li> <li>Code quality tools (ruff, mypy, pre-commit)</li> <li>PyPI publishing automation</li> <li>Documentation deployment to GitHub Pages</li> </ul>"},{"location":"changelog/#technical-details_1","title":"Technical Details","text":"<ul> <li>Python 3.8+ support</li> <li>Modern packaging with pyproject.toml</li> <li>Source layout with src/ directory</li> <li>Comprehensive development dependencies</li> <li>Pre-commit hooks for code quality</li> <li>Multi-Python version testing in CI</li> <li>Coverage reporting and tracking</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to Marvelpy! We welcome contributions from the community.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository on GitHub</li> <li> <p>Clone your fork locally:    <pre><code>git clone https://github.com/your-username/marvelpy.git\ncd marvelpy\n</code></pre></p> </li> <li> <p>Create a virtual environment:    <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install in development mode:    <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> <li> <p>Install pre-commit hooks:    <pre><code>pre-commit install\n</code></pre></p> </li> </ol>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=marvelpy --cov-report=html\n\n# Run specific test file\npytest tests/test_hello.py\n</code></pre>"},{"location":"contributing/#code-quality","title":"Code Quality","text":"<p>We use several tools to maintain code quality:</p> <ul> <li>Ruff - Fast Python linter and formatter</li> <li>MyPy - Static type checking</li> <li>Pre-commit - Git hooks for code quality</li> </ul> <p>Run these manually: <pre><code>ruff check src tests\nruff format src tests\nmypy src\n</code></pre></p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Documentation is built with MkDocs:</p> <pre><code># Install docs dependencies\npip install -e \".[docs]\"\n\n# Serve docs locally\nmkdocs serve\n\n# Build docs\nmkdocs build\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a feature branch from <code>main</code></li> <li>Make your changes with tests</li> <li>Ensure all tests pass and code quality checks pass</li> <li>Update documentation if needed</li> <li>Submit a pull request with a clear description</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use type hints for all functions</li> <li>Write docstrings for all public functions</li> <li>Keep functions small and focused</li> <li>Write tests for new functionality</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>When reporting issues, please include:</p> <ul> <li>Python version</li> <li>Marvelpy version</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Any error messages or stack traces</li> </ul>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>Feel free to open an issue for questions or discussions!</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>The easiest way to install Marvelpy is using pip:</p> <pre><code>pip install marvelpy\n</code></pre>"},{"location":"installation/#install-from-source","title":"Install from Source","text":"<p>If you want to install the latest development version:</p> <pre><code>git clone https://github.com/jlgranof/marvelpy.git\ncd marvelpy\npip install -e .\n</code></pre>"},{"location":"installation/#install-with-development-dependencies","title":"Install with Development Dependencies","text":"<p>For development and testing:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This will install: - Testing tools (pytest, pytest-cov, pytest-mock) - Linting tools (ruff, mypy) - Documentation tools (mkdocs-material) - Pre-commit hooks</p>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>You can verify the installation by importing the package:</p> <pre><code>import marvelpy\nprint(marvelpy.__version__)\n</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>Marvelpy has the following core dependencies:</p> <ul> <li><code>httpx&gt;=0.23.0</code> - Modern HTTP client for async requests</li> <li><code>pydantic&gt;=1.10.0</code> - Data validation and settings management</li> <li><code>typing-extensions&gt;=4.9.0</code> - Extended typing support</li> <li><code>click&gt;=8.1.0</code> - Command-line interface framework</li> </ul>"},{"location":"installation/#virtual-environment-recommended","title":"Virtual Environment (Recommended)","text":"<p>It's recommended to use a virtual environment:</p> <pre><code># Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# On macOS/Linux:\nsource venv/bin/activate\n# On Windows:\nvenv\\Scripts\\activate\n\n# Install marvelpy\npip install marvelpy\n</code></pre>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Get up and running with Marvelpy in minutes!</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<pre><code>pip install marvelpy\n</code></pre>"},{"location":"quickstart/#getting-api-keys","title":"Getting API Keys","text":"<p>Before you can use Marvelpy, you'll need to get API keys from Marvel:</p> <ol> <li>Visit the Marvel Developer Portal</li> <li>Sign up for a free account</li> <li>Generate your API keys (public and private)</li> </ol>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"quickstart/#setting-up-your-client","title":"Setting Up Your Client","text":"<pre><code>import asyncio\nfrom marvelpy import MarvelClient\n\nasync def main():\n    # Initialize the client with your API keys\n    async with MarvelClient(\"your_public_key\", \"your_private_key\") as client:\n        # Your code here\n        pass\n\nasyncio.run(main())\n</code></pre>"},{"location":"quickstart/#getting-characters","title":"Getting Characters","text":"<pre><code>async def get_characters():\n    async with MarvelClient(\"your_public_key\", \"your_private_key\") as client:\n        # Get a list of characters\n        characters = await client.get_characters(params={\"limit\": 5})\n        print(f\"Found {characters['data']['count']} characters\")\n\n        # Show first character\n        if characters['data']['results']:\n            first_char = characters['data']['results'][0]\n            print(f\"First character: {first_char['name']}\")\n\nasyncio.run(get_characters())\n</code></pre>"},{"location":"quickstart/#searching-for-characters","title":"Searching for Characters","text":"<pre><code>async def search_characters():\n    async with MarvelClient(\"your_public_key\", \"your_private_key\") as client:\n        # Search for Iron Man\n        results = await client.get_characters(params={\"name\": \"iron man\"})\n\n        if results['data']['results']:\n            iron_man = results['data']['results'][0]\n            print(f\"Found: {iron_man['name']} (ID: {iron_man['id']})\")\n\nasyncio.run(search_characters())\n</code></pre>"},{"location":"quickstart/#health-check","title":"Health Check","text":"<pre><code>async def check_api():\n    async with MarvelClient(\"your_public_key\", \"your_private_key\") as client:\n        # Check if the API is accessible\n        status = await client.health_check()\n        print(f\"API Status: {status['status']}\")\n\nasyncio.run(check_api())\n</code></pre>"},{"location":"quickstart/#whats-available","title":"What's Available","text":"<p>Currently, Marvelpy v0.2.1 includes:</p> <ul> <li>MarvelClient - Full-featured async client for Marvel API</li> <li>Authentication - Automatic Marvel API authentication</li> <li>Character Access - Search and retrieve character information</li> <li>Error Handling - Robust retry logic and error management</li> <li>Type Safety - Complete type hints throughout</li> <li>Test Suite - Comprehensive tests with 85% coverage</li> <li>Documentation - Full API documentation with examples</li> </ul>"},{"location":"quickstart/#coming-soon","title":"Coming Soon","text":"<p>Future versions will include:</p> <ul> <li>Comics - Access comic book data and metadata</li> <li>Events - Marvel universe events and storylines</li> <li>Series - Comic series information</li> <li>Stories - Individual story details</li> <li>Creators - Creator and artist information</li> <li>Advanced Search - More sophisticated filtering options</li> <li>Caching - Built-in response caching</li> <li>Rate Limiting - Automatic rate limit management</li> </ul>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Reference for detailed documentation</li> <li>See the Installation Guide for setup instructions</li> <li>Visit our GitHub repository for the latest updates</li> </ul>"},{"location":"api/client/","title":"MarvelClient","text":"<p>The main client class for interacting with the Marvel Comics API.</p>"},{"location":"api/client/#import","title":"Import","text":"<pre><code>from marvelpy import MarvelClient\n</code></pre>"},{"location":"api/client/#constructor","title":"Constructor","text":"<pre><code>MarvelClient(\n    public_key: str,\n    private_key: str,\n    base_url: Optional[str] = None,\n    timeout: float = 30.0,\n    max_retries: int = 3\n)\n</code></pre>"},{"location":"api/client/#parameters","title":"Parameters","text":"<ul> <li>public_key (str): Marvel API public key</li> <li>private_key (str): Marvel API private key</li> <li>base_url (Optional[str]): Base URL for the Marvel API (defaults to official API)</li> <li>timeout (float): Request timeout in seconds (default: 30)</li> <li>max_retries (int): Maximum number of retry attempts (default: 3)</li> </ul>"},{"location":"api/client/#methods","title":"Methods","text":""},{"location":"api/client/#get","title":"get","text":"<p>Make a GET request to the Marvel API.</p> <pre><code>async def get(\n    endpoint: str,\n    params: Optional[Dict[str, Any]] = None,\n    **kwargs: Any\n) -&gt; Dict[str, Any]\n</code></pre> <p>Parameters: - endpoint (str): API endpoint path - params (Optional[Dict[str, Any]]): Query parameters - kwargs: Additional arguments for httpx request</p> <p>Returns: - Dict[str, Any]: JSON response data</p> <p>Example: <pre><code># Get a specific character\ncharacter = await client.get(\"characters/1009368\")\n\n# Get characters with parameters\ncharacters = await client.get(\"characters\", params={\"limit\": 10, \"offset\": 0})\n</code></pre></p>"},{"location":"api/client/#get_characters","title":"get_characters","text":"<p>Get characters from the Marvel API.</p> <pre><code>async def get_characters(\n    params: Optional[Dict[str, Any]] = None\n) -&gt; Dict[str, Any]\n</code></pre> <p>Parameters: - params (Optional[Dict[str, Any]]): Query parameters for filtering characters</p> <p>Returns: - Dict[str, Any]: Characters data from the API</p> <p>Example: <pre><code># Get all characters\ncharacters = await client.get_characters()\n\n# Get characters with limit\ncharacters = await client.get_characters(params={\"limit\": 5})\n\n# Search for specific characters\niron_man = await client.get_characters(params={\"name\": \"iron man\"})\n</code></pre></p>"},{"location":"api/client/#health_check","title":"health_check","text":"<p>Check if the Marvel API is accessible.</p> <pre><code>async def health_check() -&gt; Dict[str, Any]\n</code></pre> <p>Returns: - Dict[str, Any]: API status information</p> <p>Example: <pre><code>status = await client.health_check()\nprint(f\"API Status: {status['status']}\")\n</code></pre></p>"},{"location":"api/client/#context-manager","title":"Context Manager","text":"<p>The MarvelClient supports async context manager for automatic resource cleanup:</p> <pre><code>async with MarvelClient(\"public_key\", \"private_key\") as client:\n    # Use the client\n    characters = await client.get_characters()\n    # Client is automatically closed when exiting the context\n</code></pre>"},{"location":"api/client/#error-handling","title":"Error Handling","text":"<p>The client includes automatic retry logic for server errors (5xx) with exponential backoff:</p> <pre><code>try:\n    characters = await client.get_characters()\nexcept httpx.HTTPError as e:\n    print(f\"HTTP error: {e}\")\nexcept httpx.RequestError as e:\n    print(f\"Request error: {e}\")\n</code></pre>"},{"location":"api/client/#authentication","title":"Authentication","text":"<p>Authentication is handled automatically. The client will add the required authentication parameters (apikey, ts, hash) to every request.</p>"},{"location":"api/client/#examples","title":"Examples","text":""},{"location":"api/client/#basic-usage","title":"Basic Usage","text":"<pre><code>import asyncio\nfrom marvelpy import MarvelClient\n\nasync def main():\n    async with MarvelClient(\"your_public_key\", \"your_private_key\") as client:\n        # Health check\n        status = await client.health_check()\n        print(f\"API Status: {status['status']}\")\n\n        # Get characters\n        characters = await client.get_characters(params={\"limit\": 5})\n        print(f\"Found {characters['data']['count']} characters\")\n\n        # Search for Iron Man\n        iron_man = await client.get_characters(params={\"name\": \"iron man\"})\n        if iron_man['data']['results']:\n            print(f\"Found: {iron_man['data']['results'][0]['name']}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"api/client/#custom-configuration","title":"Custom Configuration","text":"<pre><code>async def main():\n    # Custom timeout and retry settings\n    client = MarvelClient(\n        public_key=\"your_public_key\",\n        private_key=\"your_private_key\",\n        timeout=60.0,  # 60 second timeout\n        max_retries=5  # 5 retry attempts\n    )\n\n    try:\n        characters = await client.get_characters()\n        print(f\"Found {characters['data']['count']} characters\")\n    finally:\n        await client.close()  # Don't forget to close!\n\nasyncio.run(main())\n</code></pre>"},{"location":"api/hello/","title":"Hello Module","text":"<p>The hello module provides a simple demonstration function for the Marvelpy package.</p>"},{"location":"api/hello/#functions","title":"Functions","text":""},{"location":"api/hello/#marvelpy.hello.hello_world","title":"hello_world","text":"<pre><code>hello_world() -&gt; str\n</code></pre> <p>Return a hello world message.</p> <p>This is a simple demonstration function that returns a greeting message. It serves as a placeholder for the initial package release.</p> <p>Returns:</p> Type Description <code>str</code> <p>A greeting message string.</p> Example <p>hello_world() 'Hello from Marvelpy!'</p> Source code in <code>src/marvelpy/hello.py</code> <pre><code>def hello_world() -&gt; str:\n    \"\"\"Return a hello world message.\n\n    This is a simple demonstration function that returns a greeting message.\n    It serves as a placeholder for the initial package release.\n\n    Returns:\n        A greeting message string.\n\n    Example:\n        &gt;&gt;&gt; hello_world()\n        'Hello from Marvelpy!'\n    \"\"\"\n    return \"Hello from Marvelpy!\"\n</code></pre>"},{"location":"api/hello/#examples","title":"Examples","text":""},{"location":"api/hello/#basic-usage","title":"Basic Usage","text":"<pre><code>from marvelpy.hello import hello_world\n\n# Get the hello message\nmessage = hello_world()\nprint(message)\n# Output: \"Hello from Marvelpy!\"\n</code></pre>"},{"location":"api/hello/#type-checking","title":"Type Checking","text":"<pre><code>from marvelpy.hello import hello_world\n\n# The function returns a string\nresult = hello_world()\nassert isinstance(result, str)\nassert len(result) &gt; 0\n</code></pre>"},{"location":"api/hello/#integration-example","title":"Integration Example","text":"<pre><code>import marvelpy\n\n# Using the function from the main package\ndef greet_user():\n    return marvelpy.hello_world()\n\n# Use in your application\ngreeting = greet_user()\nprint(f\"Welcome! {greeting}\")\n</code></pre>"},{"location":"api/hello/#notes","title":"Notes","text":"<p>This is a demonstration function included in the initial release of Marvelpy. It serves as a placeholder while the full Marvel Comics API client is being developed.</p>"}]}